datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  password    String?    // Make password optional for Google login
  googleId    String?    @unique // For Google login
  name        String?    // Store the user's name
  avatarUrl   String?    // Add this field for profile pictures from Google
  role        String     // 'student' or 'instructor'
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  courses     Course[]   // One-to-many relation to courses (instructor)
  enrollments Enrollment[] // One-to-many relation to enrollments (student)
  reviews     Review[]   // One-to-many relation to reviews (student reviewing courses)
  comments    Comment[]  // One-to-many relation to comments (student commenting on sessions)
}



model Course {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  category    String
  videoUrl    String
  instructor  User       @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId Int
  sessions    Session[]  // One-to-many relation to sessions
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  enrollments Enrollment[] // One-to-many relation to enrollments
  reviews     Review[]    // One-to-many relation to reviews

}

model Session {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  videoUrl    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  progress    Progress[] // One-to-many relation to progress
  comments    Comment[]  // One-to-many relation to comments
}

model Enrollment {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  enrolledAt  DateTime @default(now())
  status      String   // 'enrolled', 'completed', 'dropped'
  progress    Progress[] // One-to-many relation to progress
  
}

model Progress {
  id            Int      @id @default(autoincrement())
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId  Int
  session       Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     Int
  isCompleted   Boolean  @default(false)
  completionDate DateTime?

  // Composite unique constraint
  @@unique([enrollmentId, sessionId])  // Ensure the combination of these two fields is unique
}



model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // Rating out of 5 stars
  comment   String?  // Optional comment
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  reviewedAt DateTime @default(now())

  @@unique([courseId, studentId])  // A student can only review a course once
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   // Comment text
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   Int
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int
  createdAt   DateTime @default(now())
}
